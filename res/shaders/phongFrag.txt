#version 430

out vec4 outColor;

in vec3 vNormal;
in vec3 vPosition;
in vec2 UV;

layout(location = 0)uniform mat4 proj;
layout(location = 1)uniform mat4 view;
layout(location = 3)uniform sampler2D diffuseMap;
layout(location = 4)uniform sampler2D specularMap;
layout(location = 5)uniform sampler2D normalMap;

mat3 cotangent_frame(in vec3 n, in vec3 p, in vec2 uv);

void main()
{
	mat3 TBN = cotangent_frame(vNormal, vPosition, UV);
	vec3 tNormal = 2 * texture(normalMap, UV).xyz - 1;
	
	vec3 N = TBN * tNormal;
	outColor = vec4(N,1);
}

mat3 cotangent_frame(in vec3 n, in vec3 p, in vec2 uv)
{
	vec3 dp1 = dFdx(p);
	vec3 dp2 = dFdy(p);
	vec3 duv1 = dFdx(uv);
	vec3 duv2 = dFdy(uv);

	vec3 dp2perp = cross(dp2,n);
	vec3 dp1perp = cross(n,dp1);

	vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
	vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;

	float invmax = inversesqrt(max(dot(T,T),dot(B,B)));

	return mat3(T * invmax, B * invmax, n);
}