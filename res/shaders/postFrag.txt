#version 430

in vec2 UV;
layout(location = 0)uniform mat4 proj;
layout(location = 1)uniform mat4 view;
layout(location = 2)uniform mat4 model;

layout(location = 3)uniform sampler2D colorMap;		// combined diffuse + specular
layout(location = 4)uniform sampler2D diffuseColor;	// Diffuse
layout(location = 5)uniform sampler2D specularColor; // specular
out vec4 outColor;

uniform vec2 sDim = vec2(1280,720);

void main()
{ 
	
	vec4 tempColor1 = vec4(0,0,0,0);
	vec4 tempColor2 = vec4(0,0,0,0);

	vec4 yColor = 
	texture(specularColor,UV + vec2( 1, -1)/sDim)   +
	texture(specularColor,UV + vec2( 0, -1)/sDim)*2 +
	texture(specularColor,UV + vec2(-1, -1)/sDim)   -
	texture(specularColor,UV + vec2( 1,  1)/sDim)    -
	texture(specularColor,UV + vec2( 0,  1)/sDim)*2  -
	texture(specularColor,UV + vec2(-1,  1)/sDim);

	vec4 xColor = 
	texture(specularColor,UV + vec2(-1, -1)/sDim)   +
	texture(specularColor,UV + vec2(-1,  0)/sDim)*2 +
	texture(specularColor,UV + vec2(-1,  1)/sDim)   -
	texture(specularColor,UV + vec2( 1, -1)/sDim)   -
	texture(specularColor,UV + vec2( 1,  0)/sDim)*2 -
	texture(specularColor,UV + vec2( 1,  1)/sDim);

	vec4 yColor1 = 
	texture(specularColor,UV + vec2( 1, -1)/sDim)   +
	texture(specularColor,UV + vec2( 0, -1)/sDim)*2 +
	texture(specularColor,UV + vec2(-1, -1)/sDim)   -
	texture(specularColor,UV + vec2( 1,  1)/sDim)    -
	texture(specularColor,UV + vec2( 0,  1)/sDim)*2  -
	texture(specularColor,UV + vec2(-1,  1)/sDim);

	vec4 xColor1 = 
	texture(diffuseColor,UV + vec2(-1, -1)/sDim)   +
	texture(diffuseColor,UV + vec2(-1,  0)/sDim)*2 +
	texture(diffuseColor,UV + vec2(-1,  1)/sDim)   -
	texture(diffuseColor,UV + vec2( 1, -1)/sDim)   -
	texture(diffuseColor,UV + vec2( 1,  0)/sDim)*2 -
	texture(diffuseColor,UV + vec2( 1,  1)/sDim);


	
	vec2 sTexelSize = 1.0f / textureSize(specularColor, 0).xy;
	tempColor1 = texture(specularColor, UV) * (11/3);
	tempColor1 += texture(specularColor, UV + vec2(0, sTexelSize.y)) * (-2/3);
	tempColor1 += texture(specularColor, UV - vec2(0, sTexelSize.y)) * (-2/3);
	tempColor1 += texture(specularColor, UV + vec2(sTexelSize.x, 0)) * (-2/3);
	tempColor1 += texture(specularColor, UV - vec2(sTexelSize.x, 0)) * (-2/3);
	tempColor1.a = 1.0f;

	vec2 dTexelSize = 1.0f / textureSize(diffuseColor, 0).xy;
	tempColor2 = texture(diffuseColor, UV) * (11/3);
	tempColor2 += texture(diffuseColor, UV + vec2(0, dTexelSize.y)) * (-2/3);
	tempColor2 += texture(diffuseColor, UV - vec2(0, dTexelSize.y)) * (-2/3);
	tempColor2 += texture(diffuseColor, UV + vec2(dTexelSize.x, 0)) * (-2/3);
	tempColor2 += texture(diffuseColor, UV - vec2(dTexelSize.x, 0)) * (-2/3);
	tempColor2.a = 1.0f;
	outColor = sqrt(yColor * yColor + xColor * xColor) + sqrt(xColor1 * xColor1 + yColor1*yColor1) * (tempColor1 + tempColor2);
//	outColor = sqrt(yColor * yColor + xColor * xColor) + sqrt(xColor1 * xColor1 + yColor1*yColor1);

	/*vec2 texelSize = 1.0f / textureSize(colorMap, 0).xy;
	tempColor = texture(colorMap, UV) * (11/3);
	for(int w = 0; w < 9; ++w)
	{
		for(int h = 0; h < 9; ++h)
		{
			tempColor += texture(colorMap + h, UV + vec2(0, texelSize.y)) * (-2/3);
			tempColor += texture(colorMap - h, UV - vec2(0, texelSize.y)) * (-2/3);
		}
		tempColor += texture(colorMap + w, UV + vec2(texelSize.x, 0)) * (-2/3);
		tempColor += texture(colorMap - w, UV - vec2(texelSize.x, 0)) * (-2/3);
	}
	tempColor.a = 1.0f;
	outColor = tempColor;*/
}